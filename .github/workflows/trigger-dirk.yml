# This is a basic workflow to help you get started with Actions

name: CI

run-name: ${{ github.actor }} is testing out GitHub Actions

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      # - name: Run a one-line script
      #   run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          cat /etc/os-release
          for it in bash git perl python python3
          do
            lR=0
            which $it || lR=$?
            if [ "0" != "$lR" ]
            then
              echo $it not found
            else
              if [ "perl" != "$it" ]
              then
                $it --version
              else
                $it -v
              fi
            fi
          done
          py=$(which python3 || which python || echo "")
          if [ "" != "$py" ]
          then
            echo $py -m pip install pylint
            $py -m pip install pylint || echo "Statement to install pylint failed"
          else
            echo "No python found">&2
          fi
	  # Too complex, do it with RANDOM
          # lT=$(date +%s)
          # lTl=${lT:0-1}
          # if [ "0" == "$lTl" ]
          if [ $(($RANDOM % 8)) -eq 0 ]
          then
            echo $lTl
            printf "ls -l /usr/bin\n%s\n" "$(ls -l /usr/bin)"
          else
            echo UnixTime $lT last second $lTl
          fi
          printf "uname -a\n%s\n" "$(uname -a)"
          printf "lscpu\n%s\n" "$(lscpu)"
